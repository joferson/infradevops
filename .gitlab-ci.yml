image: alpine:latest

variables:
  GITLAB_API_URL: "https://gitlab.com/api/v4"
  # Variáveis que devem ser configuradas no GitLab CI/CD Settings > Variables
  # GITLAB_TOKEN: ${GITLAB_TOKEN}
  # PROJECT_NAME: ${PROJECT_NAME}
  # PROJECT_TYPE: ${PROJECT_TYPE}

stages:
  - create_project

create_project:
  stage: create_project
  before_script:
    - apk add --no-cache curl jq git bash
  script:
    - |
      # Verifica se o token do GitLab está definido
      if [ -z "$GITLAB_TOKEN" ]; then
        echo "Error: GITLAB_TOKEN não está definido"
        exit 1
      fi

      # Função para ler input do usuário
      read_input() {
        local prompt="$1"
        local default="$2"
        local input
        
        if [ -n "$default" ]; then
          printf "%s [%s]: " "$prompt" "$default"
          read input
          if [ -z "$input" ]; then
            echo "$default"
          else
            echo "$input"
          fi
        else
          printf "%s: " "$prompt"
          read input
          echo "$input"
        fi
      }

      # Função para selecionar opção de uma lista
      select_option() {
        local prompt="$1"
        local options="$2"
        local selected
        local num_options
        
        echo "$prompt"
        echo "$options" | nl
        num_options=$(echo "$options" | wc -l)
        
        while true; do
          printf "Escolha uma opção (1-%d): " "$num_options"
          read selected
          if [ "$selected" -ge 1 ] && [ "$selected" -le "$num_options" ]; then
            echo "$options" | sed -n "${selected}p"
            break
          else
            echo "Opção inválida. Tente novamente."
          fi
        done
      }

      # Função para listar grupos existentes
      list_groups() {
        echo "Grupos existentes:"
        echo "----------------"
        curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          "$GITLAB_API_URL/groups" | jq -r '.[] | "ID: \(.id) - Nome: \(.name) - Path: \(.path)"'
        echo "----------------"
      }

      # Função para criar um novo grupo
      create_group() {
        local group_name="$1"
        local group_path="$2"
        local group_description="$3"
        local response
        local group_id

        echo "Criando grupo $group_name..."
        response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data "name=$group_name" \
          --data "path=$group_path" \
          --data "description=$group_description" \
          "$GITLAB_API_URL/groups")

        if echo "$response" | jq -e '.id' > /dev/null; then
          group_id=$(echo "$response" | jq -r '.id')
          echo "Grupo criado com sucesso! ID: $group_id"
          echo "$group_id"
        else
          echo "Erro ao criar grupo:"
          echo "$response" | jq -r '.message'
          echo "1"
        fi
      }

      # Função para criar arquivos base do projeto
      create_project_files() {
        local project_type="$1"
        local language="$2"
        local project_name="$3"

        # Cria diretório temporário
        mkdir -p /tmp/project_template
        cd /tmp/project_template

        # Cria arquivos base de acordo com o tipo e linguagem
        case "$project_type" in
          "api")
            case "$language" in
              "python")
                # Cria estrutura para API Python
                mkdir -p src tests
                echo "# $project_name" > README.md
                echo "API em Python" >> README.md
                echo "python-dotenv==1.0.0" > requirements.txt
                echo "pytest==7.4.0" >> requirements.txt
                echo "fastapi==0.104.1" >> requirements.txt
                echo "uvicorn==0.24.0" >> requirements.txt
                ;;
              "node")
                # Cria estrutura para API Node.js
                mkdir -p src tests
                echo "# $project_name" > README.md
                echo "API em Node.js" >> README.md
                echo '{
                  "name": "'$project_name'",
                  "version": "1.0.0",
                  "description": "API em Node.js",
                  "main": "src/index.js",
                  "scripts": {
                    "start": "node src/index.js",
                    "test": "jest"
                  },
                  "dependencies": {
                    "express": "^4.18.2",
                    "dotenv": "^16.3.1"
                  },
                  "devDependencies": {
                    "jest": "^29.7.0"
                  }
                }' > package.json
                ;;
              *)
                echo "Error: Linguagem não suportada para API: $language"
                echo "Valores aceitos: python, node"
                exit 1
                ;;
            esac
            ;;
          "web")
            case "$language" in
              "react")
                # Cria estrutura para aplicação React
                mkdir -p src public
                echo "# $project_name" > README.md
                echo "Aplicação Web em React" >> README.md
                echo '{
                  "name": "'$project_name'",
                  "version": "1.0.0",
                  "private": true,
                  "dependencies": {
                    "react": "^18.2.0",
                    "react-dom": "^18.2.0",
                    "react-scripts": "5.0.1"
                  },
                  "scripts": {
                    "start": "react-scripts start",
                    "build": "react-scripts build",
                    "test": "react-scripts test",
                    "eject": "react-scripts eject"
                  }
                }' > package.json
                ;;
              "vue")
                # Cria estrutura para aplicação Vue
                mkdir -p src public
                echo "# $project_name" > README.md
                echo "Aplicação Web em Vue" >> README.md
                echo '{
                  "name": "'$project_name'",
                  "version": "1.0.0",
                  "private": true,
                  "scripts": {
                    "serve": "vue-cli-service serve",
                    "build": "vue-cli-service build",
                    "lint": "vue-cli-service lint"
                  },
                  "dependencies": {
                    "vue": "^3.3.4",
                    "vue-router": "^4.2.5"
                  },
                  "devDependencies": {
                    "@vue/cli-service": "^5.0.8"
                  }
                }' > package.json
                ;;
              *)
                echo "Error: Linguagem não suportada para Web: $language"
                echo "Valores aceitos: react, vue"
                exit 1
                ;;
            esac
            ;;
          *)
            echo "Error: Tipo de projeto não suportado: $project_type"
            echo "Valores aceitos: api, web"
            exit 1
            ;;
        esac

        # Cria arquivo .gitignore
        echo "node_modules/" > .gitignore
        echo "dist/" >> .gitignore
        echo ".env" >> .gitignore
        echo "__pycache__/" >> .gitignore
        echo "*.pyc" >> .gitignore

        # Inicializa repositório Git
        git init
        git add .
        git config --global user.email "gitlab-runner@example.com"
        git config --global user.name "GitLab Runner"
        git commit -m "Initial commit: Template $project_type em $language"
      }

      # Interação com o usuário
      echo "=== Criação de Projeto no GitLab ==="
      echo

      # Seleciona o tipo de projeto
      PROJECT_TYPE=$(select_option "Selecione o tipo de projeto:" "api\nweb")
      echo

      # Seleciona a linguagem baseado no tipo de projeto
      if [ "$PROJECT_TYPE" = "api" ]; then
        PROJECT_LANGUAGE=$(select_option "Selecione a linguagem:" "python\nnode")
      else
        PROJECT_LANGUAGE=$(select_option "Selecione a linguagem:" "react\nvue")
      fi
      echo

      # Define o nome do projeto
      PROJECT_NAME=$(read_input "Digite o nome do projeto" "$CI_PROJECT_NAME")
      echo

      # Lista grupos existentes
      list_groups
      echo

      # Pergunta sobre o grupo
      group_choice=$(select_option "O que você deseja fazer com o grupo?" "Usar grupo existente\nCriar novo grupo\nNão usar grupo")
      echo

      case "$group_choice" in
        "Usar grupo existente")
          GROUP_ID=$(read_input "Digite o ID do grupo existente")
          namespace_id="$GROUP_ID"
          ;;
        "Criar novo grupo")
          GROUP_NAME=$(read_input "Digite o nome do novo grupo")
          GROUP_PATH=$(read_input "Digite o path do novo grupo" "$GROUP_NAME")
          GROUP_DESCRIPTION=$(read_input "Digite a descrição do grupo" "Grupo criado automaticamente")
          
          namespace_id=$(create_group "$GROUP_NAME" "$GROUP_PATH" "$GROUP_DESCRIPTION")
          if [ "$namespace_id" = "1" ]; then
            echo "Erro ao criar grupo. Criando projeto sem grupo..."
            namespace_id=""
          fi
          ;;
        "Não usar grupo")
          echo "Criando projeto sem grupo..."
          namespace_id=""
          ;;
      esac

      # Cria o projeto no GitLab
      echo "Criando projeto $PROJECT_NAME..."
      
      # Prepara os dados para a requisição
      data="name=$PROJECT_NAME&description=Template de projeto $PROJECT_TYPE em $PROJECT_LANGUAGE&initialize_with_readme=false"
      if [ -n "$namespace_id" ]; then
        data="$data&namespace_id=$namespace_id"
      fi
      
      # Faz a requisição para criar o projeto
      response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --data "$data" \
        "$GITLAB_API_URL/projects")
      
      # Verifica se a requisição foi bem sucedida
      if echo "$response" | jq -e '.id' > /dev/null; then
        project_id=$(echo "$response" | jq -r '.id')
        project_url=$(echo "$response" | jq -r '.web_url')
        project_ssh_url=$(echo "$response" | jq -r '.ssh_url_to_repo')
        
        echo "Projeto criado com sucesso!"
        echo "ID do projeto: $project_id"
        echo "URL do projeto: $project_url"
        
        # Cria os arquivos do projeto
        create_project_files "$PROJECT_TYPE" "$PROJECT_LANGUAGE" "$PROJECT_NAME"
        
        # Adiciona o repositório remoto e envia os arquivos
        git remote add origin "$project_ssh_url"
        git push -u origin master
        
        echo "Template do projeto criado e enviado com sucesso!"
      else
        echo "Erro ao criar projeto:"
        echo "$response" | jq -r '.message'
        exit 1
      fi
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_BRANCH == "master"
  variables:
    PROJECT_TYPE: $CI_PROJECT_TYPE
    PROJECT_LANGUAGE: $CI_PROJECT_LANGUAGE
    GROUP_ID: $CI_GROUP_ID
    GROUP_NAME: $CI_GROUP_NAME
    GROUP_PATH: $CI_GROUP_PATH

# Variáveis que devem ser configuradas no GitLab CI/CD Settings > Variables
# GITLAB_TOKEN: ${GITLAB_TOKEN}
# PROJECT_NAME: ${PROJECT_NAME}
# PROJECT_TYPE: ${PROJECT_TYPE} 