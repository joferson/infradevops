image: alpine:latest

variables:
  GITLAB_API_URL: "https://gitlab.com/api/v4"
  # Variáveis que devem ser configuradas no GitLab CI/CD Settings > Variables
  # GITLAB_TOKEN: ${GITLAB_TOKEN}
  # PROJECT_NAME: ${PROJECT_NAME}
  # PROJECT_TYPE: ${PROJECT_TYPE}

# Templates reutilizáveis
.template: &template
  image: alpine:latest
  before_script:
    - apk add --no-cache curl jq git bash

# Funções utilitárias
.functions: &functions
  # Função para criar variável no GitLab
  create_variable() {
    local project_id="$1"
    local key="$2"
    local value="$3"
    local response

    echo "Criando variável $key..."
    response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --data "key=$key" \
      --data "value=$value" \
      --data "variable_type=env_var" \
      --data "protected=false" \
      --data "masked=false" \
      "$GITLAB_API_URL/projects/$project_id/variables")

    if echo "$response" | jq -e '.key' > /dev/null; then
      echo "Variável $key criada com sucesso!"
      return 0
    else
      echo "Erro ao criar variável $key:"
      echo "$response" | jq -r '.message'
      return 1
    fi
  }

  # Função para verificar se variável existe
  check_variable() {
    local project_id="$1"
    local key="$2"
    local response

    response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "$GITLAB_API_URL/projects/$project_id/variables/$key")

    if echo "$response" | jq -e '.key' > /dev/null; then
      return 0
    else
      return 1
    fi
  }

  # Função para listar variáveis existentes
  list_variables() {
    local project_id="$1"
    local response

    echo "Variáveis existentes:"
    echo "----------------"
    response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "$GITLAB_API_URL/projects/$project_id/variables")
    echo "$response" | jq -r '.[] | "\(.key): \(.value)"'
    echo "----------------"
  }

  # Função para criar um novo grupo
  create_group() {
    local group_name="$1"
    local group_path="$2"
    local group_description="$3"
    local response
    local group_id

    echo "Criando grupo $group_name..."
    response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --data "name=$group_name" \
      --data "path=$group_path" \
      --data "description=$group_description" \
      "$GITLAB_API_URL/groups")

    if echo "$response" | jq -e '.id' > /dev/null; then
      group_id=$(echo "$response" | jq -r '.id')
      echo "Grupo criado com sucesso! ID: $group_id"
      echo "$group_id"
    else
      echo "Erro ao criar grupo:"
      echo "$response" | jq -r '.message'
      echo "1"
    fi
  }

  # Função para criar arquivos base do projeto
  create_project_files() {
    local project_type="$1"
    local language="$2"
    local project_name="$3"

    # Cria diretório temporário
    mkdir -p /tmp/project_template
    cd /tmp/project_template

    # Cria arquivos base de acordo com o tipo e linguagem
    case "$project_type" in
      "api")
        case "$language" in
          "python")
            # Cria estrutura para API Python
            mkdir -p src tests
            echo "# $project_name" > README.md
            echo "API em Python" >> README.md
            echo "python-dotenv==1.0.0" > requirements.txt
            echo "pytest==7.4.0" >> requirements.txt
            echo "fastapi==0.104.1" >> requirements.txt
            echo "uvicorn==0.24.0" >> requirements.txt
            ;;
          "node")
            # Cria estrutura para API Node.js
            mkdir -p src tests
            echo "# $project_name" > README.md
            echo "API em Node.js" >> README.md
            echo '{
              "name": "'$project_name'",
              "version": "1.0.0",
              "description": "API em Node.js",
              "main": "src/index.js",
              "scripts": {
                "start": "node src/index.js",
                "test": "jest"
              },
              "dependencies": {
                "express": "^4.18.2",
                "dotenv": "^16.3.1"
              },
              "devDependencies": {
                "jest": "^29.7.0"
              }
            }' > package.json
            ;;
          *)
            echo "Error: Linguagem não suportada para API: $language"
            echo "Valores aceitos: python, node"
            exit 1
            ;;
        esac
        ;;
      "web")
        case "$language" in
          "react")
            # Cria estrutura para aplicação React
            mkdir -p src public
            echo "# $project_name" > README.md
            echo "Aplicação Web em React" >> README.md
            echo '{
              "name": "'$project_name'",
              "version": "1.0.0",
              "private": true,
              "dependencies": {
                "react": "^18.2.0",
                "react-dom": "^18.2.0",
                "react-scripts": "5.0.1"
              },
              "scripts": {
                "start": "react-scripts start",
                "build": "react-scripts build",
                "test": "react-scripts test",
                "eject": "react-scripts eject"
              }
            }' > package.json
            ;;
          "vue")
            # Cria estrutura para aplicação Vue
            mkdir -p src public
            echo "# $project_name" > README.md
            echo "Aplicação Web em Vue" >> README.md
            echo '{
              "name": "'$project_name'",
              "version": "1.0.0",
              "private": true,
              "scripts": {
                "serve": "vue-cli-service serve",
                "build": "vue-cli-service build",
                "lint": "vue-cli-service lint"
              },
              "dependencies": {
                "vue": "^3.3.4",
                "vue-router": "^4.2.5"
              },
              "devDependencies": {
                "@vue/cli-service": "^5.0.8"
              }
            }' > package.json
            ;;
          *)
            echo "Error: Linguagem não suportada para Web: $language"
            echo "Valores aceitos: react, vue"
            exit 1
            ;;
        esac
        ;;
      *)
        echo "Error: Tipo de projeto não suportado: $project_type"
        echo "Valores aceitos: api, web"
        exit 1
        ;;
    esac

    # Cria arquivo .gitignore
    echo "node_modules/" > .gitignore
    echo "dist/" >> .gitignore
    echo ".env" >> .gitignore
    echo "__pycache__/" >> .gitignore
    echo "*.pyc" >> .gitignore

    # Inicializa repositório Git
    git init
    git add .
    git config --global user.email "gitlab-runner@example.com"
    git config --global user.name "GitLab Runner"
    git commit -m "Initial commit: Template $project_type em $language"
  }

stages:
  - validate
  - create_group
  - create_project
  - setup_project

# Job para validar e criar variáveis
validate:
  stage: validate
  <<: *template
  script:
    - |
      # Verifica se o token do GitLab está definido
      if [ -z "$GITLAB_TOKEN" ]; then
        echo "Error: GITLAB_TOKEN não está definido"
        exit 1
      fi

      # Lista variáveis existentes
      echo "Variáveis existentes:"
      echo "----------------"
      curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables" | jq -r '.[] | "\(.key): \(.value)"'
      echo "----------------"

      # Verifica e cria variáveis necessárias
      if ! curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables/PROJECT_TYPE" | jq -e '.key' > /dev/null; then
        echo "Variável PROJECT_TYPE não encontrada. Criando..."
        curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data "key=PROJECT_TYPE" \
          --data "value=api" \
          --data "variable_type=env_var" \
          --data "protected=false" \
          --data "masked=false" \
          "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables"
      fi

      if ! curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables/PROJECT_LANGUAGE" | jq -e '.key' > /dev/null; then
        echo "Variável PROJECT_LANGUAGE não encontrada. Criando..."
        if [ "$PROJECT_TYPE" = "api" ]; then
          curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
            --data "key=PROJECT_LANGUAGE" \
            --data "value=python" \
            --data "variable_type=env_var" \
            --data "protected=false" \
            --data "masked=false" \
            "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables"
        else
          curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
            --data "key=PROJECT_LANGUAGE" \
            --data "value=react" \
            --data "variable_type=env_var" \
            --data "protected=false" \
            --data "masked=false" \
            "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables"
        fi
      fi

      if ! curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables/PROJECT_NAME" | jq -e '.key' > /dev/null; then
        echo "Variável PROJECT_NAME não encontrada. Criando..."
        curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data "key=PROJECT_NAME" \
          --data "value=$CI_PROJECT_NAME" \
          --data "variable_type=env_var" \
          --data "protected=false" \
          --data "masked=false" \
          "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables"
      fi

      if ! curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables/CREATE_GROUP" | jq -e '.key' > /dev/null; then
        echo "Variável CREATE_GROUP não encontrada. Criando..."
        curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data "key=CREATE_GROUP" \
          --data "value=false" \
          --data "variable_type=env_var" \
          --data "protected=false" \
          --data "masked=false" \
          "$GITLAB_API_URL/projects/$CI_PROJECT_ID/variables"
      fi

      # Verifica se as variáveis têm valores válidos
      if [ "$PROJECT_TYPE" != "api" ] && [ "$PROJECT_TYPE" != "web" ]; then
        echo "Error: PROJECT_TYPE inválido"
        echo "Valores aceitos: api, web"
        exit 1
      fi

      if [ "$PROJECT_TYPE" = "api" ]; then
        if [ "$PROJECT_LANGUAGE" != "python" ] && [ "$PROJECT_LANGUAGE" != "node" ]; then
          echo "Error: PROJECT_LANGUAGE inválido para API"
          echo "Valores aceitos: python, node"
          exit 1
        fi
      else
        if [ "$PROJECT_LANGUAGE" != "react" ] && [ "$PROJECT_LANGUAGE" != "vue" ]; then
          echo "Error: PROJECT_LANGUAGE inválido para Web"
          echo "Valores aceitos: react, vue"
          exit 1
        fi
      fi

      echo "Todas as variáveis necessárias estão configuradas!"
  artifacts:
    reports:
      dotenv: build.env

# Job para criar grupo (opcional)
create_group:
  stage: create_group
  <<: *template
  script:
    - |
      if [ "$CREATE_GROUP" = "true" ]; then
        echo "Criando grupo $GROUP_NAME..."
        response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
          --data "name=$GROUP_NAME" \
          --data "path=$GROUP_PATH" \
          --data "description=$GROUP_DESCRIPTION" \
          "$GITLAB_API_URL/groups")

        if echo "$response" | jq -e '.id' > /dev/null; then
          namespace_id=$(echo "$response" | jq -r '.id')
          echo "Grupo criado com sucesso! ID: $namespace_id"
          echo "namespace_id=$namespace_id" >> build.env
        else
          echo "Erro ao criar grupo. Criando projeto sem grupo..."
          echo "namespace_id=" >> build.env
        fi
      else
        echo "namespace_id=$GROUP_ID" >> build.env
      fi
  artifacts:
    reports:
      dotenv: build.env
  rules:
    - if: $CREATE_GROUP == "true" || $GROUP_ID
  when: manual
  allow_failure: true

# Job para criar o projeto
create_project:
  stage: create_project
  <<: *template
  script:
    - |
      # Cria o projeto no GitLab
      echo "Criando projeto $PROJECT_NAME..."
      
      # Prepara os dados para a requisição
      data="name=$PROJECT_NAME&description=Template de projeto $PROJECT_TYPE em $PROJECT_LANGUAGE&initialize_with_readme=false"
      if [ -n "$namespace_id" ]; then
        data="$data&namespace_id=$namespace_id"
      fi
      
      # Faz a requisição para criar o projeto
      response=$(curl --silent --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --data "$data" \
        "$GITLAB_API_URL/projects")
      
      # Verifica se a requisição foi bem sucedida
      if echo "$response" | jq -e '.id' > /dev/null; then
        project_id=$(echo "$response" | jq -r '.id')
        project_url=$(echo "$response" | jq -r '.web_url')
        project_ssh_url=$(echo "$response" | jq -r '.ssh_url_to_repo')
        
        echo "Projeto criado com sucesso!"
        echo "ID do projeto: $project_id"
        echo "URL do projeto: $project_url"
        
        # Salva informações do projeto para o próximo job
        echo "project_id=$project_id" >> build.env
        echo "project_url=$project_url" >> build.env
        echo "project_ssh_url=$project_ssh_url" >> build.env
        echo "project_type=$PROJECT_TYPE" >> build.env
        echo "project_language=$PROJECT_LANGUAGE" >> build.env
        echo "project_name=$PROJECT_NAME" >> build.env
      else
        echo "Erro ao criar projeto:"
        echo "$response" | jq -r '.message'
        exit 1
      fi
  artifacts:
    reports:
      dotenv: build.env
  dependencies:
    - create_group

# Job para configurar o projeto
setup_project:
  stage: setup_project
  <<: *template
  script:
    - |
      # Cria diretório temporário
      mkdir -p /tmp/project_template
      cd /tmp/project_template

      # Cria arquivos base de acordo com o tipo e linguagem
      case "$project_type" in
        "api")
          case "$project_language" in
            "python")
              # Cria estrutura para API Python
              mkdir -p src tests
              echo "# $project_name" > README.md
              echo "API em Python" >> README.md
              echo "python-dotenv==1.0.0" > requirements.txt
              echo "pytest==7.4.0" >> requirements.txt
              echo "fastapi==0.104.1" >> requirements.txt
              echo "uvicorn==0.24.0" >> requirements.txt
              ;;
            "node")
              # Cria estrutura para API Node.js
              mkdir -p src tests
              echo "# $project_name" > README.md
              echo "API em Node.js" >> README.md
              echo '{
                "name": "'$project_name'",
                "version": "1.0.0",
                "description": "API em Node.js",
                "main": "src/index.js",
                "scripts": {
                  "start": "node src/index.js",
                  "test": "jest"
                },
                "dependencies": {
                  "express": "^4.18.2",
                  "dotenv": "^16.3.1"
                },
                "devDependencies": {
                  "jest": "^29.7.0"
                }
              }' > package.json
              ;;
          esac
          ;;
        "web")
          case "$project_language" in
            "react")
              # Cria estrutura para aplicação React
              mkdir -p src public
              echo "# $project_name" > README.md
              echo "Aplicação Web em React" >> README.md
              echo '{
                "name": "'$project_name'",
                "version": "1.0.0",
                "private": true,
                "dependencies": {
                  "react": "^18.2.0",
                  "react-dom": "^18.2.0",
                  "react-scripts": "5.0.1"
                },
                "scripts": {
                  "start": "react-scripts start",
                  "build": "react-scripts build",
                  "test": "react-scripts test",
                  "eject": "react-scripts eject"
                }
              }' > package.json
              ;;
            "vue")
              # Cria estrutura para aplicação Vue
              mkdir -p src public
              echo "# $project_name" > README.md
              echo "Aplicação Web em Vue" >> README.md
              echo '{
                "name": "'$project_name'",
                "version": "1.0.0",
                "private": true,
                "scripts": {
                  "serve": "vue-cli-service serve",
                  "build": "vue-cli-service build",
                  "lint": "vue-cli-service lint"
                },
                "dependencies": {
                  "vue": "^3.3.4",
                  "vue-router": "^4.2.5"
                },
                "devDependencies": {
                  "@vue/cli-service": "^5.0.8"
                }
              }' > package.json
              ;;
          esac
          ;;
      esac

      # Cria arquivo .gitignore
      echo "node_modules/" > .gitignore
      echo "dist/" >> .gitignore
      echo ".env" >> .gitignore
      echo "__pycache__/" >> .gitignore
      echo "*.pyc" >> .gitignore

      # Inicializa repositório Git
      git init
      git add .
      git config --global user.email "gitlab-runner@example.com"
      git config --global user.name "GitLab Runner"
      git commit -m "Initial commit: Template $project_type em $project_language"
      
      # Adiciona o repositório remoto e envia os arquivos
      git remote add origin "$project_ssh_url"
      git push -u origin master
      
      echo "Template do projeto criado e enviado com sucesso!"
  dependencies:
    - create_project

# Regras para execução do pipeline
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_COMMIT_BRANCH == "master"

# Variáveis que devem ser configuradas no GitLab CI/CD Settings > Variables
# GITLAB_TOKEN: ${GITLAB_TOKEN}
# PROJECT_NAME: ${PROJECT_NAME}
# PROJECT_TYPE: ${PROJECT_TYPE}
# PROJECT_LANGUAGE: ${PROJECT_LANGUAGE}
# CREATE_GROUP: ${CREATE_GROUP}
# GROUP_NAME: ${GROUP_NAME}
# GROUP_PATH: ${GROUP_PATH}
# GROUP_DESCRIPTION: ${GROUP_DESCRIPTION}
# GROUP_ID: ${GROUP_ID} 